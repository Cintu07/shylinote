{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/components/TopNav.jsx"],"sourcesContent":["export default function TopNav(props) {\n    const { hello, isViewer, handleToggleViewer, handleToggleMenu, savingNote\n        , handleSaveNote } = props\n\n    return (\n        <>\n\n            <div className=\"notes-btn\">\n                <button onClick={handleToggleMenu} className=\"card-button-primary menu\">\n                    <i className=\"fa-solid fa-bars\"></i>\n                </button>\n                <button onClick={handleSaveNote} disabled={savingNote} className=\"card-button-secondary\">\n                    <h6>Save</h6>\n                    <i className=\"fa-solid fa-floppy-disk\"></i>\n                </button>\n                <button onClick={handleToggleViewer} className=\"card-button-secondary\">\n                    {isViewer ?\n                        <>\n                            <h6>Editor</h6>\n                            <i className=\"fa-solid fa-pencil\"></i>\n                        </> :\n                        <>\n                            <h6>Viewer</h6>\n                            <i className=\"fa-solid fa-check-double\"></i>\n                        </>\n                    }\n                </button>\n            </div>\n            <div className=\"full-line\"></div>\n        </>\n    )\n}"],"names":[],"mappings":";;;;;AAAe,SAAS,OAAO,KAAK;IAChC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,UAAU,EACnE,cAAc,EAAE,GAAG;IAEzB,qBACI;;0BAEI,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAO,SAAS;wBAAkB,WAAU;kCACzC,cAAA,6LAAC;4BAAE,WAAU;;;;;;;;;;;kCAEjB,6LAAC;wBAAO,SAAS;wBAAgB,UAAU;wBAAY,WAAU;;0CAC7D,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;gCAAE,WAAU;;;;;;;;;;;;kCAEjB,6LAAC;wBAAO,SAAS;wBAAoB,WAAU;kCAC1C,yBACG;;8CACI,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;oCAAE,WAAU;;;;;;;yDAEjB;;8CACI,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;oCAAE,WAAU;;;;;;;;;;;;;;;;;;;0BAK7B,6LAAC;gBAAI,WAAU;;;;;;;;AAG3B;KA/BwB","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/components/Editor.jsx"],"sourcesContent":["import TopNav from \"./TopNav\"\n\nexport default function Editor(props) {\n    const { text, setText } = props\n\n    return (\n        <section className=\"notes-container\">\n            <TopNav {...props} />\n            <textarea value={text} onChange={setText} placeholder=\"The mitochondria is the powerhouse of the cell\" />\n        </section>\n    )\n}"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS,OAAO,KAAK;IAChC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG;IAE1B,qBACI,6LAAC;QAAQ,WAAU;;0BACf,6LAAC,wHAAA,CAAA,UAAM;gBAAE,GAAG,KAAK;;;;;;0BACjB,6LAAC;gBAAS,OAAO;gBAAM,UAAU;gBAAS,aAAY;;;;;;;;;;;;AAGlE;KATwB","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/components/MDX.jsx"],"sourcesContent":["import Markdown from \"markdown-to-jsx\";\nimport TopNav from \"./TopNav\";\n\nexport default function MDX(props) {\n    const { text } = props // gives us access to the text attribute (or the value assigned to it really)\n    const md = `# this is a header 1\n## this is a header 2\n\nhello world\n[click me](https://www.google.com)\n    `\n    return (\n        <section className=\"mdx-container\">\n            <TopNav {...props} />\n            <article>\n                <Markdown>\n                    {text.trim() || 'Hop in the editor to create a new note'}\n                </Markdown>\n            </article>\n        </section>\n    )\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS,IAAI,KAAK;IAC7B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,6EAA6E;;IACpG,MAAM,KAAK,CAAC;;;;;IAKZ,CAAC;IACD,qBACI,6LAAC;QAAQ,WAAU;;0BACf,6LAAC,wHAAA,CAAA,UAAM;gBAAE,GAAG,KAAK;;;;;;0BACjB,6LAAC;0BACG,cAAA,6LAAC,mKAAA,CAAA,UAAQ;8BACJ,KAAK,IAAI,MAAM;;;;;;;;;;;;;;;;;AAKpC;KAlBwB","debugId":null}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/components/SideNav.jsx"],"sourcesContent":["import { useAuth } from \"@/context/AuthContext\"\nimport { db } from \"@/firebase\"\nimport { collection, deleteDoc, doc, getDocs } from \"firebase/firestore\"\nimport { useRouter } from \"next/navigation\"\nimport { useEffect, useRef } from \"react\"\n\nexport default function SideNav(props) {\n\n    const { showNav, setShowNav, noteIds, setNoteIds, handleCreateNote, setIsViewer } = props\n    const { logout, currentUser } = useAuth()\n\n    const ref = useRef()\n    const router = useRouter()\n\n    async function deleteNote(noteIdx) {\n        try {\n            const noteRef = doc(db, 'users', currentUser.uid, 'notes', noteIdx)\n            await deleteDoc(noteRef)\n            setNoteIds((curr) => {\n                return curr.filter(idx => idx !== noteIdx)\n            })\n        } catch (err) {\n            console.log(err.message)\n        } finally { }\n    }\n\n    useEffect(() => {\n        // this is the code block that gets executed when our ref changes (so in this case it's when the ref is assigned)\n\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                setShowNav(false)\n            }\n        }\n\n        document.addEventListener('mousedown', handleClickOutside)\n        return () => {\n            // cleanup - unbind the event listener on clean up\n            document.removeEventListener('mousedown', handleClickOutside)\n        }\n\n    }, [ref])\n\n    useEffect(() => {\n        if (!currentUser) { return } // because if we don't have a user then we can't fetch anything so exit this code block\n\n        async function fetchIndexes() { // this fetches the ids of all our docuemtns\n            try {\n                const notesRef = collection(db, 'users', currentUser.uid, 'notes')\n                const snapshot = await getDocs(notesRef)\n                const notesIndexes = snapshot.docs.map((doc) => {\n                    return doc.id\n                })\n                setNoteIds(notesIndexes)\n            } catch (err) {\n                console.log(err.message)\n            } finally {\n\n            }\n        }\n        fetchIndexes()\n    }, [])\n\n    return (\n        <section ref={ref} className={\"nav \" + (showNav ? '' : ' hidden-nav ')}>\n            <h1 className=\"text-gradient\">MDNOTES</h1>\n            <h6>Easy Breezy Notes</h6>\n            <div className=\"full-line\"></div>\n            <button onClick={handleCreateNote}>\n                <h6>New note</h6>\n                <i className=\"fa-solid fa-plus\"></i>\n            </button>\n            <div className=\"notes-list\">\n                {noteIds.length == 0 ?\n                    <p>You have 0 notes</p> :\n                    noteIds.map((note, idx) => {\n                        const [n, d] = note.split('__')\n                        const date = (new Date(parseInt(d))).toString()\n\n                        return (\n                            <button onClick={() => {\n                                router.push('/notes?id=' + note)\n                                setIsViewer(true)\n                            }} key={idx} className=\"card-button-secondary list-btn\">\n                                <p>{n}</p>\n                                <small>{date.split(' ').slice(1, 4).join(' ')}</small>\n                                <div onClick={(e) => {\n                                    e.stopPropagation()\n                                    deleteNote(note)\n                                }} className=\"delete-btn\">\n                                    <i className=\"fa-solid fa-trash-can\"></i>\n                                </div>\n                            </button>\n                        )\n                    })}\n            </div>\n            <div className=\"full-line\"></div>\n            <button onClick={logout} >\n                <h6>Logout</h6>\n                <i className=\"fa-solid fa-arrow-right-from-bracket\"></i>\n            </button>\n        </section>\n    )\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;AAEe,SAAS,QAAQ,KAAK;;IAEjC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAAG;IACpF,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD;IAEtC,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD;IACjB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,eAAe,WAAW,OAAO;QAC7B,IAAI;YACA,MAAM,UAAU,CAAA,GAAA,sKAAA,CAAA,MAAG,AAAD,EAAE,2GAAA,CAAA,KAAE,EAAE,SAAS,YAAY,GAAG,EAAE,SAAS;YAC3D,MAAM,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE;YAChB,WAAW,CAAC;gBACR,OAAO,KAAK,MAAM,CAAC,CAAA,MAAO,QAAQ;YACtC;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,GAAG,CAAC,IAAI,OAAO;QAC3B,SAAU,CAAE;IAChB;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;6BAAE;YACN,iHAAiH;YAEjH,SAAS,mBAAmB,KAAK;gBAC7B,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAAG;oBACpD,WAAW;gBACf;YACJ;YAEA,SAAS,gBAAgB,CAAC,aAAa;YACvC;qCAAO;oBACH,kDAAkD;oBAClD,SAAS,mBAAmB,CAAC,aAAa;gBAC9C;;QAEJ;4BAAG;QAAC;KAAI;IAER,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;6BAAE;YACN,IAAI,CAAC,aAAa;gBAAE;YAAO,EAAE,uFAAuF;YAEpH,eAAe;gBACX,IAAI;oBACA,MAAM,WAAW,CAAA,GAAA,sKAAA,CAAA,aAAU,AAAD,EAAE,2GAAA,CAAA,KAAE,EAAE,SAAS,YAAY,GAAG,EAAE;oBAC1D,MAAM,WAAW,MAAM,CAAA,GAAA,sKAAA,CAAA,UAAO,AAAD,EAAE;oBAC/B,MAAM,eAAe,SAAS,IAAI,CAAC,GAAG;uEAAC,CAAC;4BACpC,OAAO,IAAI,EAAE;wBACjB;;oBACA,WAAW;gBACf,EAAE,OAAO,KAAK;oBACV,QAAQ,GAAG,CAAC,IAAI,OAAO;gBAC3B,SAAU,CAEV;YACJ;YACA;QACJ;4BAAG,EAAE;IAEL,qBACI,6LAAC;QAAQ,KAAK;QAAK,WAAW,SAAS,CAAC,UAAU,KAAK,cAAc;;0BACjE,6LAAC;gBAAG,WAAU;0BAAgB;;;;;;0BAC9B,6LAAC;0BAAG;;;;;;0BACJ,6LAAC;gBAAI,WAAU;;;;;;0BACf,6LAAC;gBAAO,SAAS;;kCACb,6LAAC;kCAAG;;;;;;kCACJ,6LAAC;wBAAE,WAAU;;;;;;;;;;;;0BAEjB,6LAAC;gBAAI,WAAU;0BACV,QAAQ,MAAM,IAAI,kBACf,6LAAC;8BAAE;;;;;2BACH,QAAQ,GAAG,CAAC,CAAC,MAAM;oBACf,MAAM,CAAC,GAAG,EAAE,GAAG,KAAK,KAAK,CAAC;oBAC1B,MAAM,OAAO,AAAC,IAAI,KAAK,SAAS,IAAK,QAAQ;oBAE7C,qBACI,6LAAC;wBAAO,SAAS;4BACb,OAAO,IAAI,CAAC,eAAe;4BAC3B,YAAY;wBAChB;wBAAa,WAAU;;0CACnB,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;0CAAO,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;;;;;;0CACzC,6LAAC;gCAAI,SAAS,CAAC;oCACX,EAAE,eAAe;oCACjB,WAAW;gCACf;gCAAG,WAAU;0CACT,cAAA,6LAAC;oCAAE,WAAU;;;;;;;;;;;;uBAPb;;;;;gBAWhB;;;;;;0BAER,6LAAC;gBAAI,WAAU;;;;;;0BACf,6LAAC;gBAAO,SAAS;;kCACb,6LAAC;kCAAG;;;;;;kCACJ,6LAAC;wBAAE,WAAU;;;;;;;;;;;;;;;;;;AAI7B;GAjGwB;;QAGY,0HAAA,CAAA,UAAO;QAGxB,qIAAA,CAAA,YAAS;;;KANJ","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/app/notes/page.js"],"sourcesContent":["'use client'\nimport Editor from \"@/components/Editor\"\nimport MDX from \"@/components/MDX\"\nimport SideNav from \"@/components/SideNav\"\nimport { useAuth } from \"@/context/AuthContext\"\nimport { db } from \"@/firebase\"\nimport { doc, getDoc, serverTimestamp, setDoc } from \"firebase/firestore\"\nimport { useSearchParams } from \"next/navigation\"\nimport { useEffect, useState } from \"react\"\n\nexport default function NotesPage() {\n    const [isViewer, setIsViewer] = useState(true)\n    // const [text, setText] = useState('')\n    const [showNav, setShowNav] = useState(false)\n    const [note, setNote] = useState({\n        content: ''\n    })\n    const [isLoading, setIsLoading] = useState(false)\n    const [noteIds, setNoteIds] = useState([])\n    const [savingNote, setSavingNote] = useState(false)\n\n    const { currentUser, isLoadingUser } = useAuth()\n\n    const searchParams = useSearchParams()\n\n\n    function handleToggleViewer() {\n        // isViewer = !isViewer\n        setIsViewer(!isViewer)\n    }\n\n    function handleToggleMenu() {\n        setShowNav(!showNav)\n    }\n\n    function handleCreateNote() {\n        // create a new note\n        setNote({\n            content: ''\n        })\n        setIsViewer(false)\n        window.history.replaceState(null, '', '/notes')\n    }\n\n    function handleEditNote(e) {\n        // edit an existing note\n        setNote({ ...note, content: e.target.value })\n    }\n\n    async function handleSaveNote() {\n        if (!note?.content) { return }\n        setSavingNote(true)\n        try {\n            // see if note already exists in database\n            if (note.id) {\n                // then we have an existing note cause we have it's id, so write to existing note\n                const noteRef = doc(db, 'users', currentUser.uid, 'notes', note.id)\n                await setDoc(noteRef, {\n                    ...note\n                }, { merge: true })\n            } else {\n                // that means that it's a brand new note and will only contain the content field, so we can basically save a new note to firebase\n                const newId = note.content.replaceAll('#', '').slice(0, 15) + '__' + Date.now()\n                const notesRef = doc(db, 'users', currentUser.uid, 'notes', newId)\n                const newDocInfo = await setDoc(notesRef, {\n                    content: note.content,\n                    createdAt: serverTimestamp()\n                })\n                setNoteIds(curr => [...curr, newId])\n                setNote({ ...note, id: newId })\n                window.history.pushState(null, '', `?id=${newId}`)\n            }\n        } catch (err) {\n            console.log(err.message)\n        } finally {\n            setSavingNote(false)\n        }\n    }\n\n    useEffect(() => {\n        // locally cache notes in a global context (like the one we already have, you perhaps just need an extra state)\n        const value = searchParams.get('id')\n\n        if (!value || !currentUser) { return }\n\n        async function fetchNote() {\n            if (isLoading) { return }\n            try {\n                setIsLoading(true)\n                console.log('FETCHING DATA')\n                const noteRef = doc(db, 'users', currentUser.uid, 'notes', value)\n                const snapshot = await getDoc(noteRef)\n                const docData = snapshot.exists() ? { id: snapshot.id, ...snapshot.data() } : null\n                if (docData) {\n                    setNote({ ...docData })\n                }\n            } catch (err) {\n                console.log(err.message)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        fetchNote()\n    }, [currentUser, searchParams])\n\n\n    if (isLoadingUser) {\n        return (\n            <h6 className=\"text-gradient\">Loading...</h6>\n        )\n    }\n\n    if (!currentUser) {\n        // if no user found, then boot them to the home page cause this is the notes page (for auth users only)\n        window.location.href = '/'\n    }\n\n    return (\n        <main id=\"notes\">\n            <SideNav setIsViewer={setIsViewer} handleCreateNote={handleCreateNote} noteIds={noteIds} setNoteIds={setNoteIds} showNav={showNav} setShowNav={setShowNav} />\n            {!isViewer && (\n                <Editor savingNote={savingNote} handleSaveNote={handleSaveNote} handleToggleMenu={handleToggleMenu} setText={handleEditNote} text={note.content} hello=\"world\" isViewer={isViewer} handleToggleViewer={handleToggleViewer} />\n            )}\n            {isViewer && (\n                <MDX savingNote={savingNote} handleSaveNote={handleSaveNote} handleToggleMenu={handleToggleMenu} text={note.content} isViewer={isViewer} handleToggleViewer={handleToggleViewer} />\n            )}\n        </main>\n    )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 693, "column": 0}, "map": {"version":3,"file":"index.modern.js","sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV === 'test') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst Priority = {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX: 0,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH: 1,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED: 2,\n  /**\n   * inline elements\n   */\n  LOW: 3,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN: 4,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script', 'pre']\nconst ATTRIBUTES_TO_SANITIZE = [\n  'src',\n  'href',\n  'data',\n  'formAction',\n  'srcDoc',\n  'action',\n]\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|(?!\\1)`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^(~~)${INLINE_SKIP_R}\\\\1`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^[\\s\\S](?:(?!  |[0-9]\\.|http)[^=*_~\\-\\n<`\\\\\\[!])*/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _qualify: source => LIST_ITEM_PREFIX_R.test(source),\n    _match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    _render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction startsWith(str: string, prefix: string) {\n  return str.startsWith(prefix)\n}\n\nfunction qualifies(\n  source: string,\n  state: MarkdownToJSX.State,\n  qualify: MarkdownToJSX.Rule<any>['_qualify']\n) {\n  if (Array.isArray(qualify)) {\n    for (let i = 0; i < qualify.length; i++) {\n      if (startsWith(source, qualify[i])) return true\n    }\n\n    return false\n  }\n\n  return qualify(source, state)\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\ntype StyleTuple = [key: string, value: string]\n\nfunction parseStyleAttribute(styleString: string): StyleTuple[] {\n  const styles: StyleTuple[] = []\n  let buffer = ''\n  let inUrl = false\n  let inQuotes = false\n  let quoteChar: '\"' | \"'\" | '' = ''\n\n  if (!styleString) return styles\n\n  for (let i = 0; i < styleString.length; i++) {\n    const char = styleString[i]\n\n    // Handle quotes\n    if ((char === '\"' || char === \"'\") && !inUrl) {\n      if (!inQuotes) {\n        inQuotes = true\n        quoteChar = char\n      } else if (char === quoteChar) {\n        inQuotes = false\n        quoteChar = ''\n      }\n    }\n\n    // Track url() values\n    if (char === '(' && buffer.endsWith('url')) {\n      inUrl = true\n    } else if (char === ')' && inUrl) {\n      inUrl = false\n    }\n\n    // Only split on semicolons when not in quotes or url()\n    if (char === ';' && !inQuotes && !inUrl) {\n      const declaration = buffer.trim()\n      if (declaration) {\n        const colonIndex = declaration.indexOf(':')\n        if (colonIndex > 0) {\n          const key = declaration.slice(0, colonIndex).trim()\n          const value = declaration.slice(colonIndex + 1).trim()\n          styles.push([key, value])\n        }\n      }\n      buffer = ''\n    } else {\n      buffer += char\n    }\n  }\n\n  // Handle the last declaration\n  const declaration = buffer.trim()\n  if (declaration) {\n    const colonIndex = declaration.indexOf(':')\n    if (colonIndex > 0) {\n      const key = declaration.slice(0, colonIndex).trim()\n      const value = declaration.slice(colonIndex + 1).trim()\n      styles.push([key, value])\n    }\n  }\n\n  return styles\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return parseStyleAttribute(value).reduce(function (styles, [key, value]) {\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = sanitizeUrlFn(value, tag, key)\n\n      return styles\n    }, {})\n  } else if (ATTRIBUTES_TO_SANITIZE.indexOf(key) !== -1) {\n    return sanitizeUrlFn(unescape(value), tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = unescape(value.slice(1, value.length - 1))\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  var ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      const order = rules[type]._order\n      if (typeof order !== 'number' || !isFinite(order)) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  ruleList.sort(function (a, b) {\n    return rules[a]._order - rules[b]._order || (a < b ? -1 : 1)\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    var result = []\n    state.prevCapture = state.prevCapture || ''\n\n    if (source.trim()) {\n      while (source) {\n        var i = 0\n        while (i < ruleList.length) {\n          var ruleType = ruleList[i]\n          var rule = rules[ruleType]\n\n          if (rule._qualify && !qualifies(source, state, rule._qualify)) {\n            i++\n            continue\n          }\n\n          var capture = rule._match(source, state)\n          if (capture && capture[0]) {\n            source = source.substring(capture[0].length)\n\n            var parsed = rule._parse(capture, nestedParse, state)\n\n            state.prevCapture += capture[0]\n\n            if (!parsed.type) parsed.type = ruleType as unknown as RuleType\n            result.push(parsed)\n            break\n          }\n          i++\n        }\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function (source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nconst SANITIZE_R = /(javascript|vbscript|data(?!:image)):/i\n\nexport function sanitizer(input: string): string {\n  try {\n    const decoded = decodeURIComponent(input).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (SANITIZE_R.test(decoded)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Input contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Input could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        input\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return input\n}\n\nfunction unescape(rawString: string): string {\n  return rawString ? rawString.replace(UNESCAPE_R, '$1') : rawString\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type]._render as MarkdownToJSX.Rule['_render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n): React.JSX.Element {\n  options.overrides = options.overrides || {}\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const slug = options.slugify || slugify\n  const sanitize = options.sanitizer || sanitizer\n  const createElement = options.createElement || React.createElement\n\n  const NON_PARAGRAPH_BLOCK_SYNTAXES = [\n    BLOCKQUOTE_R,\n    CODE_BLOCK_FENCED_R,\n    CODE_BLOCK_R,\n    options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R,\n    HEADING_SETEXT_R,\n    NP_TABLE_R,\n    ORDERED_LIST_R,\n    UNORDERED_LIST_R,\n  ]\n\n  const BLOCK_SYNTAXES = [\n    ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n    PARAGRAPH_R,\n    HTML_BLOCK_ELEMENT_R,\n    HTML_COMMENT_R,\n    HTML_SELF_CLOSING_ELEMENT_R,\n  ]\n\n  function containsBlockSyntax(input: string) {\n    return BLOCK_SYNTAXES.some(r => r.test(input))\n  }\n\n  function matchParagraph(source: string, state: MarkdownToJSX.State) {\n    if (\n      state.inline ||\n      state.simple ||\n      (state.inHTML &&\n        source.indexOf('\\n\\n') === -1 &&\n        state.prevCapture.indexOf('\\n\\n') === -1)\n    ) {\n      return null\n    }\n\n    let match = ''\n\n    source.split('\\n').every(line => {\n      line += '\\n'\n\n      // bail out on first sign of non-paragraph block\n      if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n        return false\n      }\n\n      match += line\n\n      return !!line.trim()\n    })\n\n    const captured = trimEnd(match)\n    if (captured === '') {\n      return null\n    }\n\n    // parseCaptureInline expects the inner content to be at index 2\n    // because index 1 is the delimiter for text formatting syntaxes\n    return [match, , captured] as RegExpMatchArray\n  }\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return createElement(wrapper, { key: 'outer' }, jsx) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    if (!str || !str.trim()) {\n      return null\n    }\n\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          sanitize\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      _qualify: ['>'],\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      _render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' + slug(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      _qualify: source => {\n        const char = source[0]\n        return char === '-' || char === '*' || char === '_'\n      },\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      _qualify: ['    '],\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: unescape(trimEnd(capture[0].replace(/^ {4}/gm, ''))),\n        }\n      },\n\n      _render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      _qualify: ['```', '~~~'],\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      _qualify: ['`'],\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: unescape(capture[2]),\n        }\n      },\n      _render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      _qualify: ['[^'],\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      _qualify: ['[^'],\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          target: `#${slug(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitize(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      _qualify: ['[ ]', '[x]'],\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      _qualify: ['#'],\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: slug(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      _render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          const prevInHTML = state.inHTML\n          state.inHTML = true\n          ast.children = parseFunc(parse, trimmed, state)\n          state.inHTML = prevInHTML\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      _render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      _render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      _qualify: ['<!--'],\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: unescape(capture[1]),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitize(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      _qualify: ['['],\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={sanitize(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      _qualify: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) return false\n        return startsWith(source, 'http://') || startsWith(source, 'https://')\n      },\n      _match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      _match: allowInline(matchParagraph),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] ? unescape(capture[1]) : undefined,\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitize(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitize(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      _qualify: ['|'],\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture) {\n        const text = capture[0]\n        return {\n          text:\n            text.indexOf('&') === -1\n              ? text\n              : text.replace(\n                  HTML_CHAR_CODE_R,\n                  (full, inner) => options.namedCodesToUnicode[inner] || full\n                ),\n        }\n      },\n      _render(node) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      _qualify: ['**', '__'],\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      _qualify: source => {\n        const char = source[0]\n        return (char === '*' || char === '_') && source[1] !== char\n      },\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      _qualify: ['\\\\'],\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      _qualify: ['=='],\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      _qualify: ['~~'],\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, parse: parse } = rules[key]\n\n  //   // rules[key].match = (...args) => {\n  //   //   const start = performance.now()\n  //   //   const result = match(...args)\n  //   //   const delta = performance.now() - start\n\n  //   //   if (delta > 5)\n  //   //     console.warn(\n  //   //       `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //   //     )\n\n  //   //   return result\n  //   // }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5) {\n  //       console.warn(\n  //         `Slow parse for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n  //     }\n\n  //     // console[delta > 5 ? 'warn' : 'log'](\n  //     //   `${key}:parse`,\n  //     //   `${delta.toFixed(3)}ms`,\n  //     //   args[0]\n  //     // )\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={slug(def.identifier, slugify)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an HTML context */\n    inHTML?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: (typeof Priority)[keyof typeof Priority]\n    _parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    /**\n     * Optional fast check that can quickly determine if this rule\n     * should even be attempted. Should check the start of the source string\n     * for quick patterns without expensive regex operations.\n     *\n     * @param source The input source string (already trimmed of leading whitespace)\n     * @param state Current parser state\n     * @returns true if the rule should be attempted, false to skip\n     */\n    _qualify?:\n      | string[]\n      | ((source: string, state: MarkdownToJSX.State) => boolean)\n    _render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"names":["RuleType","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","class","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTRIBUTES_TO_SANITIZE","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BLOCKQUOTE_ALERT_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_TRIM_PIPES","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","UNESCAPE_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","_qualify","source","test","_match","allowInline","state","isStartOfLine","exec","prevCapture","list","inline","simple","_order","_parse","capture","parse","start","undefined","items","replace","match","lastItemWasAParagraph","map","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","oldStateInline","oldStateList","adjustedContent","trimEnd","result","_render","node","output","key","LINK_R","IMAGE_R","str","end","slice","startsWith","prefix","qualifies","qualify","Array","isArray","slugify","parseTableAlignCapture","alignCapture","parseTableRow","tableOutput","prevInTable","inTable","cells","acc","flush","cell","push","apply","trim","split","filter","Boolean","forEach","fragment","arr","parseTable","align","rowText","parseTableCells","header","children","getTableStyle","colIndex","textAlign","fn","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","SANITIZE_R","sanitizer","input","decoded","decodeURIComponent","e","unescape","rawString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","join","get","src","path","fb","ptr","frags","shift","compiler","markdown","options","overrides","_extends","slug","sanitize","createElement","React","NON_PARAGRAPH_BLOCK_SYNTAXES","enforceAtxHeadings","BLOCK_SYNTAXES","tag","props","overrideProps","override","getTag","className","compile","forceInline","forceBlock","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","delimiterIdx","_","letter","toUpperCase","normalizeAttributeKey","value","first","unquote","mappedKey","normalizedValue","sanitizeUrlFn","styleString","styles","buffer","inUrl","inQuotes","quoteChar","char","endsWith","declaration","colonIndex","parseStyleAttribute","substr","attributeValueToJSXPropValue","footnotes","refs","rules","alert","unshift","attrs","noInnerParse","__","lang","identifier","target","href","completed","checked","readOnly","id","level","whitespace","trimmer","trimmed","parseFunc","some","r","tagName","ast","inAnchor","prevInHTML","inHTML","alt","title","disableAutoLink","address","every","line","captured","fallbackChildren","style","row","c","full","inner","disableParsingRawHTML","ruleList","Object","keys","nestedParse","ruleType","rule","substring","parsed","sort","a","b","normalizeWhitespace","parserFor","render","userRender","renderer","createRenderer","renderRule","patchedRender","oldKey","lastWasString","nodeOut","isString","def","_ref","_objectWithoutPropertiesLoose","_excluded","cloneElement"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1651, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kolag/Desktop/nextjs-15-course-main%20%281%29/nextjs-15-course-main/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}